package components

import (
	"fmt"
)

type ResumeData struct {
	Personal struct {
		Name     string `yaml:"name"`
		Title    string `yaml:"title"`
		Email    string `yaml:"email"`
		Phone    string `yaml:"phone"`
		Location string `yaml:"location"`
		Linkedin string `yaml:"linkedin"`
		Github   string `yaml:"github"`
		Summary  string `yaml:"summary"`
		Photo    string `yaml:"photo"`
	} `yaml:"personal"`
	Skills []struct {
		Category string `yaml:"category"`
		Items    []struct {
			Name string `yaml:"name"`
			Link string `yaml:"link,omitempty"`
		} `yaml:"items"`
	} `yaml:"skills"`
	Experience []struct {
		Company        string   `yaml:"company"`
		Position       string   `yaml:"position"`
		Location       string   `yaml:"location"`
		EmploymentType string   `yaml:"employmentType"`
		StartDate      string   `yaml:"startDate"`
		EndDate        string   `yaml:"endDate"`
		Description    []string `yaml:"description"`
		Technologies   []struct {
			Name string `yaml:"name"`
			Link string `yaml:"link,omitempty"`
		} `yaml:"technologies"`
	} `yaml:"experience"`
	Education []struct {
		Institution string `yaml:"institution"`
		Degree      string `yaml:"degree"`
		Location    string `yaml:"location"`
		StartDate   string `yaml:"startDate"`
		EndDate     string `yaml:"endDate"`
	} `yaml:"education"`
	Projects []struct {
		Name         string `yaml:"name"`
		Description  string `yaml:"description"`
		Technologies []struct {
			Name string `yaml:"name"`
			Link string `yaml:"link,omitempty"`
		} `yaml:"technologies"`
		Link         string `yaml:"link"`
	} `yaml:"projects"`
	Languages []struct {
		Language    string `yaml:"language"`
		Proficiency string `yaml:"proficiency"`
	} `yaml:"languages"`
}

templ Resume(data ResumeData) {
	@Layout(data.Personal.Name + " - Resume") {
		<div x-data="{ darkMode: localStorage.getItem('darkMode') === 'true' }" 
			x-init="$watch('darkMode', val => { localStorage.setItem('darkMode', val); document.documentElement.classList.toggle('dark', val); })" 
			class="min-h-screen transition-colors duration-300">
			<div class="bg-card text-card-foreground rounded-lg shadow-md overflow-hidden">
				@Header(data.Personal)
				@Skills(data.Skills)
				@Experience(data.Experience)
				if len(data.Education) > 0 {
					@Education(data.Education)
				}
				if len(data.Projects) > 0 {
					@Projects(data.Projects)
				}
				@Languages(data.Languages)
			</div>
			@ExportButton()
			@ThemeToggle()
		</div>
	}
}

templ Header(personal struct {
	Name     string `yaml:"name"`
	Title    string `yaml:"title"`
	Email    string `yaml:"email"`
	Phone    string `yaml:"phone"`
	Location string `yaml:"location"`
	Linkedin string `yaml:"linkedin"`
	Github   string `yaml:"github"`
	Summary  string `yaml:"summary"`
	Photo    string `yaml:"photo"`
}) {
	<header class="bg-primary text-primary-foreground p-8">
		<div class="flex flex-col md:flex-row gap-8">
			if personal.Photo != "" {
				<div class="flex-shrink-0 flex justify-center">
					<img src={ personal.Photo } alt={ personal.Name } class="w-32 h-32 rounded-full object-cover border-4 border-card"/>
				</div>
			}
			<div class="flex-grow text-left">
				<h1 class="text-3xl font-bold mb-2">{ personal.Name }</h1>
				<h2 class="text-xl font-normal mb-4">{ personal.Title }</h2>
				<p class="mb-4 max-w-2xl">{ personal.Summary }</p>
				<div class="flex flex-wrap gap-4 mt-4">
					<a href={ templ.SafeURL(fmt.Sprintf("mailto:%s", personal.Email)) } class="flex items-center gap-2 text-primary-foreground hover:underline">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>
						{ personal.Email }
					</a>
					<a href={ templ.SafeURL(fmt.Sprintf("tel:%s", personal.Phone)) } class="flex items-center gap-2 text-primary-foreground hover:underline">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg>
						{ personal.Phone }
					</a>
					<a href={ templ.SafeURL(personal.Linkedin) } target="_blank" class="flex items-center gap-2 text-primary-foreground hover:underline">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect x="2" y="9" width="4" height="12"></rect><circle cx="4" cy="4" r="2"></circle></svg>
						LinkedIn
					</a>
					<a href={ templ.SafeURL(personal.Github) } target="_blank" class="flex items-center gap-2 text-primary-foreground hover:underline">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path></svg>
						GitHub
					</a>
					<span class="flex items-center gap-2 text-primary-foreground">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>
						{ personal.Location }
					</span>
				</div>
			</div>
		</div>
	</header>
}

templ Skills(skills []struct {
	Category string `yaml:"category"`
	Items    []struct {
		Name string `yaml:"name"`
		Link string `yaml:"link,omitempty"`
	} `yaml:"items"`
}) {
	<section class="p-8 border-b border-border">
		<h3 class="text-xl font-semibold mb-6 text-primary border-b-2 border-primary pb-2 inline-block">Skills</h3>
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
			for _, skill := range skills {
				<div class="mb-4">
					<h4 class="font-medium mb-2 text-foreground">{ skill.Category }</h4>
					<div class="flex flex-wrap gap-2">
						for _, item := range skill.Items {
							<span class="skill-badge bg-secondary text-secondary-foreground text-sm px-3 py-1 rounded-md">
								if item.Link != "" {
									<a href={ templ.SafeURL(item.Link) } target="_blank" class="hover:underline">{ item.Name }</a>
								} else {
									{ item.Name }
								}
							</span>
						}
					</div>
				</div>
			}
		</div>
	</section>
}

templ Experience(experience []struct {
	Company        string   `yaml:"company"`
	Position       string   `yaml:"position"`
	Location       string   `yaml:"location"`
	EmploymentType string   `yaml:"employmentType"`
	StartDate      string   `yaml:"startDate"`
	EndDate        string   `yaml:"endDate"`
	Description    []string `yaml:"description"`
	Technologies   []struct {
		Name string `yaml:"name"`
		Link string `yaml:"link,omitempty"`
	} `yaml:"technologies"`
}) {
	<section class="p-8 border-b border-border">
		<h3 class="text-xl font-semibold mb-6 text-primary border-b-2 border-primary pb-2 inline-block">Experience</h3>
		<div class="space-y-6">
			for _, exp := range experience {
				<div class="experience-card bg-card border border-border rounded-lg p-5 shadow-sm">
					<div class="flex flex-col md:flex-row md:justify-between mb-3">
						<h4 class="font-semibold text-foreground">{ exp.Position }</h4>
						<span class="text-muted-foreground text-sm">{ exp.StartDate } - { exp.EndDate }</span>
					</div>
					<div class="text-primary mb-3 flex items-center flex-wrap gap-2">
						<span>{ exp.Company }, { exp.Location }</span>
						if exp.EmploymentType != "" {
							<span class="px-2 py-1 text-xs rounded-md bg-secondary text-secondary-foreground">{ exp.EmploymentType }</span>
						}
					</div>
					<div>
						<ul class="list-disc pl-5 space-y-1 mb-4 theme-optimized-list">
							for _, desc := range exp.Description {
								<li class="text-sm theme-optimized-item">{ desc }</li>
							}
						</ul>
					</div>
					if len(exp.Technologies) > 0 {
						<div class="mt-3">
							<h5 class="text-sm font-medium mb-2 text-foreground">Technologies:</h5>
							<div class="flex flex-wrap gap-2">
								for _, tech := range exp.Technologies {
									<span class="tech-badge bg-secondary/70 text-secondary-foreground text-xs px-2 py-1 rounded-md">
										if tech.Link != "" {
											<a href={ templ.SafeURL(tech.Link) } target="_blank" class="hover:underline">{ tech.Name }</a>
										} else {
											{ tech.Name }
										}
									</span>
								}
							</div>
						</div>
					}
				</div>
			}
		</div>
	</section>
}

templ Education(education []struct {
	Institution string `yaml:"institution"`
	Degree      string `yaml:"degree"`
	Location    string `yaml:"location"`
	StartDate   string `yaml:"startDate"`
	EndDate     string `yaml:"endDate"`
}) {
	<section class="p-8 border-b border-border">
		<h3 class="text-xl font-semibold mb-6 text-primary border-b-2 border-primary pb-2 inline-block">Education</h3>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
			for _, edu := range education {
				<div class="experience-card bg-card border border-border rounded-lg p-4 shadow-sm">
					<div class="flex flex-col md:flex-row md:justify-between mb-2">
						<h4 class="font-semibold text-foreground">{ edu.Degree }</h4>
						<span class="text-muted-foreground text-sm">{ edu.StartDate } - { edu.EndDate }</span>
					</div>
					<div class="text-primary text-sm">{ edu.Institution }, { edu.Location }</div>
				</div>
			}
		</div>
	</section>
}

templ Projects(projects []struct {
	Name         string `yaml:"name"`
	Description  string `yaml:"description"`
	Technologies []struct {
		Name string `yaml:"name"`
		Link string `yaml:"link,omitempty"`
	} `yaml:"technologies"`
	Link         string `yaml:"link"`
}) {
	<section class="p-8 border-b border-border">
		<h3 class="text-xl font-semibold mb-6 text-primary border-b-2 border-primary pb-2 inline-block">Projects</h3>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
			for _, project := range projects {
				<div class="experience-card bg-card border border-border rounded-lg p-4 shadow-sm">
					<h4 class="font-semibold text-foreground mb-2">{ project.Name }</h4>
					<p class="mb-3 text-sm">{ project.Description }</p>
					<div class="flex flex-wrap gap-2 mb-3">
						for _, tech := range project.Technologies {
							<span class="tech-badge border border-border text-foreground text-xs px-2 py-1 rounded-md">
								if tech.Link != "" {
									<a href={ templ.SafeURL(tech.Link) } target="_blank" class="hover:underline">{ tech.Name }</a>
								} else {
									{ tech.Name }
								}
							</span>
						}
					</div>
					<a href={ templ.SafeURL(project.Link) } target="_blank" class="text-primary hover:underline inline-block text-sm">View Project</a>
				</div>
			}
		</div>
	</section>
}

templ Languages(languages []struct {
	Language    string `yaml:"language"`
	Proficiency string `yaml:"proficiency"`
}) {
	<section class="p-8">
		<h3 class="text-xl font-semibold mb-6 text-primary border-b-2 border-primary pb-2 inline-block">Languages</h3>
		<div class="flex flex-wrap gap-4">
			for _, lang := range languages {
				<div class="experience-card bg-card border border-border rounded-lg p-3 shadow-sm">
					<h4 class="font-medium text-foreground">{ lang.Language }</h4>
					<div class="text-sm text-muted-foreground mt-1">{ lang.Proficiency }</div>
				</div>
			}
		</div>
	</section>
}

templ ExportButton() {
	<button id="export-pdf" class="fixed bottom-8 right-8 bg-primary text-primary-foreground rounded-full w-14 h-14 flex items-center justify-center shadow-md hover:shadow-lg transition-shadow" title="Export to PDF">
		<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
	</button>
}

templ ThemeToggle() {
	<button 
		@click="darkMode = !darkMode" 
		class="fixed bottom-8 left-8 bg-primary text-primary-foreground rounded-full w-14 h-14 flex items-center justify-center shadow-md hover:shadow-lg transition-shadow" 
		title="Toggle theme"
	>
		<svg x-show="!darkMode" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>
		<svg x-show="darkMode" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>
	</button>
} 